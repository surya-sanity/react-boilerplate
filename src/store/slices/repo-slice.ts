import { createSlice } from "@reduxjs/toolkit";
import { repoService } from "app/services/repo-api";
import { RepoSliceInitialState } from "app/types/repo";
import { useInjectReducer } from "redux-injectors";

// INITIAL STATE
export const repoSliceInitialState: RepoSliceInitialState = {
  repos: [],
};

// SLICE
const repoSlice = createSlice({
  name: "repo",
  initialState: repoSliceInitialState,
  reducers: {
    /**
     * Resets the repoSlice state to its initial state, which is:
     * {
     *   repos: [],
     * }
     *
     * @returns The initial state of the repoSlice.
     */
    resetRepoState: () => repoSliceInitialState,
  },

  /**
   * extraReducers
   *
   * This is a special kind of reducer that is used to handle actions that are not
   * generated by the createSlice function. It allows you to add custom reducers
   * that will be called when an action is dispatched.
   *
   */
  extraReducers: (builder) => {
    /**
     *
     * Add the matcher for the getReposByUserName endpoint.
     *
     * This matcher is triggered when the getReposByUserName endpoint is fulfilled.
     * It updates the state of the repoSlice with the payload of the fulfilled action.
     *
     */
    builder.addMatcher(repoService.endpoints.getReposByUserName.matchFulfilled, (state, action) => {
      state.repos = action.payload ?? [];
    });
  },
});

/**
 * useRepoSlice
 *
 * Injects the repo slice reducer into the store, and returns the actions.
 *
 * @returns {Object} an object containing the actions of the repo slice.
 */
export const useRepoSlice = () => {
  useInjectReducer({ key: repoSlice.name, reducer: repoSlice.reducer });
  return { actions: repoSlice.actions };
};

export default repoSlice.reducer;
